package red.stevo.code.Lexer;

import java_cup.runtime.*;

parser code {:
  private ZaraLexer scanner;

  public parser(ZaraLexer s) {
    this.scanner = s;
  }

  public java_cup.runtime.Symbol scan() throws java.lang.Exception {
     return scanner.yylex();
  }

:};

terminal IDENTIFIER, CONSTANT, FLOAT;
terminal OPERATOR_ADD, OPERATOR_SUB, OPERATOR_MUL, OPERATOR_DIV, ASSIGN;
terminal SEMI_COLON, PUNCTUATION_LEFT, PUNCTUATION_RIGHT, KEYWORD;


non terminal StmtList, Stmt, Expr, Term, Factor;


precedence left OPERATOR_ADD, OPERATOR_SUB;
precedence left OPERATOR_MUL, OPERATOR_DIV;

start with StmtList;

StmtList ::= StmtList Stmt {:
                System.out.println("Parsed StmtList: StmtList Stmt");
            :}
           | /* empty */ {:
                System.out.println("Parsed empty StmtList");
            :};

Stmt ::= KEYWORD IDENTIFIER ASSIGN Expr SEMI_COLON {:
                System.out.println("Parsed Stmt: KEYWORD IDENTIFIER ASSIGN Expr SEMI_COLON");
            :}
       | Expr SEMI_COLON {:
                System.out.println("Parsed Stmt: Expr SEMI_COLON");
            :};

Expr ::= Expr OPERATOR_ADD Term {:
                System.out.println("Parsed Expr: Expr OPERATOR_ADD Term");
            :}
       | Expr OPERATOR_SUB Term {:
                System.out.println("Parsed Expr: Expr OPERATOR_SUB Term");
            :}
       | Term {:
                System.out.println("Parsed Expr: Term");
            :};

Term ::= Term OPERATOR_MUL Factor {:
                System.out.println("Parsed Term: Term OPERATOR_MUL Factor");
            :}
       | Term OPERATOR_DIV Factor {:
                System.out.println("Parsed Term: Term OPERATOR_DIV Factor");
            :}
       | Factor {:
                System.out.println("Parsed Term: Factor");
            :};

Factor ::= CONSTANT {:
                System.out.println("Parsed Factor: CONSTANT");
            :}
         | IDENTIFIER {:
                System.out.println("Parsed Factor: IDENTIFIER");
            :}
         | FLOAT {:
                System.out.println("Parsed Factor: FLOAT");
            :}
         | PUNCTUATION_LEFT Expr PUNCTUATION_RIGHT {:
                System.out.println("Parsed Factor: PUNCTUATION_LEFT Expr PUNCTUATION_RIGHT");
            :};


