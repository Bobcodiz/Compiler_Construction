// CUP specification for ZaraParser
package red.stevo.code.Parser;

import java_cup.runtime.*;

/* Preliminaries to set up and use the scanner. */
//init with {: scanner.init();              :};
//scan with {: return scanner.next_token(); :};

parser code {:
  private ZaraLexer scanner;

  public parser(ZaraLexer s) {
    this.scanner = s;
  }

  public java_cup.runtime.Symbol scan() throws java.lang.Exception {
     return scanner.yylex();
  }

:};


/* Terminals (tokens returned by the scanner). */
terminal IDENTIFIER, CONSTANT, FLOAT;
terminal OPERATOR_ADD, OPERATOR_SUB, OPERATOR_MUL, OPERATOR_DIV, ASSIGN;
terminal SEMI_COLON, PUNCTUATION_LEFT, PUNCTUATION_RIGHT, KEYWORD;

/* Non terminals */
non terminal StmtList, Stmt, Expr, Term, Factor;

/* Precedences */
precedence left OPERATOR_ADD, OPERATOR_SUB;
precedence left OPERATOR_MUL, OPERATOR_DIV;

/* The grammar */
start with StmtList;

StmtList ::= StmtList Stmt
           | /* empty */ ;

Stmt ::= KEYWORD IDENTIFIER ASSIGN Expr SEMI_COLON
       | Expr SEMI_COLON;

Expr ::= Expr OPERATOR_ADD Term
       | Expr OPERATOR_SUB Term
       | Term;

Term ::= Term OPERATOR_MUL Factor
       | Term OPERATOR_DIV Factor
       | Factor;

Factor ::= CONSTANT
         | IDENTIFIER
         | FLOAT
         | PUNCTUATION_LEFT Expr PUNCTUATION_RIGHT;
