
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package red.stevo.code.Parser;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\017\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\007\000\002\003\004\000\002\004\005" +
    "\000\002\004\005\000\002\004\003\000\002\005\005\000" +
    "\002\005\005\000\002\005\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\033\000\016\002\uffff\004\uffff\005\uffff\006\uffff\034" +
    "\uffff\036\uffff\001\002\000\016\002\007\004\014\005\005" +
    "\006\016\034\010\036\015\001\002\000\016\007\ufff6\010" +
    "\ufff6\011\ufff6\012\ufff6\033\ufff6\035\ufff6\001\002\000\010" +
    "\007\024\010\023\033\035\001\002\000\004\002\001\001" +
    "\002\000\012\004\014\005\005\006\016\034\010\001\002" +
    "\000\016\002\000\004\000\005\000\006\000\034\000\036" +
    "\000\001\002\000\016\007\ufffa\010\ufffa\011\026\012\027" +
    "\033\ufffa\035\ufffa\001\002\000\016\007\ufff7\010\ufff7\011" +
    "\ufff7\012\ufff7\033\ufff7\035\ufff7\001\002\000\016\007\ufff5" +
    "\010\ufff5\011\ufff5\012\ufff5\033\ufff5\035\ufff5\001\002\000" +
    "\004\004\017\001\002\000\016\007\ufff4\010\ufff4\011\ufff4" +
    "\012\ufff4\033\ufff4\035\ufff4\001\002\000\004\013\020\001" +
    "\002\000\012\004\014\005\005\006\016\034\010\001\002" +
    "\000\010\007\024\010\023\033\022\001\002\000\016\002" +
    "\ufffe\004\ufffe\005\ufffe\006\ufffe\034\ufffe\036\ufffe\001\002" +
    "\000\012\004\014\005\005\006\016\034\010\001\002\000" +
    "\012\004\014\005\005\006\016\034\010\001\002\000\016" +
    "\007\ufffc\010\ufffc\011\026\012\027\033\ufffc\035\ufffc\001" +
    "\002\000\012\004\014\005\005\006\016\034\010\001\002" +
    "\000\012\004\014\005\005\006\016\034\010\001\002\000" +
    "\016\007\ufff8\010\ufff8\011\ufff8\012\ufff8\033\ufff8\035\ufff8" +
    "\001\002\000\016\007\ufff9\010\ufff9\011\ufff9\012\ufff9\033" +
    "\ufff9\035\ufff9\001\002\000\016\007\ufffb\010\ufffb\011\026" +
    "\012\027\033\ufffb\035\ufffb\001\002\000\010\007\024\010" +
    "\023\035\034\001\002\000\016\007\ufff3\010\ufff3\011\ufff3" +
    "\012\ufff3\033\ufff3\035\ufff3\001\002\000\016\002\ufffd\004" +
    "\ufffd\005\ufffd\006\ufffd\034\ufffd\036\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\033\000\004\002\003\001\001\000\012\003\010\004" +
    "\005\005\011\006\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\032\005\011\006" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\020\005\011\006\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\031\006\012\001\001\000\006\005\024\006\012\001\001" +
    "\000\002\001\001\000\004\006\030\001\001\000\004\006" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  private ZaraLexer scanner;

  public parser(ZaraLexer s) {
    this.scanner = s;
  }

  public java_cup.runtime.Symbol scan() throws java.lang.Exception {
     return scanner.yylex();
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= StmtList EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // StmtList ::= StmtList Stmt 
            {
              Object RESULT =null;
		System.out.println("Parsed StmtList: StmtList Stmt");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtList",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // StmtList ::= 
            {
              Object RESULT =null;
		System.out.println("Parsed empty StmtList");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtList",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Stmt ::= KEYWORD IDENTIFIER ASSIGN Expr SEMI_COLON 
            {
              Object RESULT =null;
		 System.out.println("Parsed Stmt: KEYWORD IDENTIFIER ASSIGN Expr SEMI_COLON");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Stmt ::= Expr SEMI_COLON 
            {
              Object RESULT =null;
		System.out.println("Parsed Stmt: Expr SEMI_COLON");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Expr ::= Expr OPERATOR_ADD Term 
            {
              Object RESULT =null;
		System.out.println("Parsed Expr: Expr OPERATOR_ADD Term");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Expr ::= Expr OPERATOR_SUB Term 
            {
              Object RESULT =null;
		System.out.println("Parsed Expr: Expr OPERATOR_SUB Term");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Expr ::= Term 
            {
              Object RESULT =null;
		System.out.println("Parsed Expr: Term");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Term ::= Term OPERATOR_MUL Factor 
            {
              Object RESULT =null;
		System.out.println("Parsed Term: Term OPERATOR_MUL Factor");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Term ::= Term OPERATOR_DIV Factor 
            {
              Object RESULT =null;
		System.out.println("Parsed Term: Term OPERATOR_DIV Factor");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Term ::= Factor 
            {
              Object RESULT =null;
		System.out.println("Parsed Term: Factor");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Factor ::= CONSTANT 
            {
              Object RESULT =null;
		System.out.println("Parsed Factor: CONSTANT");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Factor ::= IDENTIFIER 
            {
              Object RESULT =null;
		System.out.println("Parsed Factor: IDENTIFIER");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Factor ::= FLOAT 
            {
              Object RESULT =null;
		System.out.println("Parsed Factor: FLOAT");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Factor ::= PUNCTUATION_LEFT Expr PUNCTUATION_RIGHT 
            {
              Object RESULT =null;
		System.out.println("Parsed Factor: PUNCTUATION_LEFT Expr PUNCTUATION_RIGHT");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
