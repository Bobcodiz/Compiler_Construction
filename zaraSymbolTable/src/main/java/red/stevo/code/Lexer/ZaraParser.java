/* Generated By:JavaCC: Do not edit this line. ZaraParser.java */
package red.stevo.code.Lexer;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.ParseTree;

public class ZaraParser implements ZaraParserConstants {
  public ZaraParser(CommonTokenStream tokens) {
     super();
  }

/*  public ZaraParser(TokenStream tokenStream) {
    super();
  }*/

  // Start of the program
   final public ParseTree Start() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case FOR:
      case RETURN:
      case PLUS:
      case MINUS:
      case LPAREN:
      case IDENTIFIER:
      case CONSTANT:
      case FLOAT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Statement();
    }
    jj_consume_token(0);
     return null;
   }

// Statement
  static final public void Statement() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        Expression();
                             System.out.println("Declared variable: " + t.image);
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          ParameterList();
          break;
        default:
          jj_la1[1] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        jj_consume_token(LBRACE);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IF:
          case WHILE:
          case FOR:
          case RETURN:
          case PLUS:
          case MINUS:
          case LPAREN:
          case IDENTIFIER:
          case CONSTANT:
          case FLOAT:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_2;
          }
          Statement();
        }
        jj_consume_token(RBRACE);
                                                                  System.out.println("Declared function: " + t.image);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case IF:
      IfStatement();
      break;
    case WHILE:
      WhileStatement();
      break;
    case FOR:
      ForStatement();
      break;
    case PLUS:
    case MINUS:
    case LPAREN:
    case CONSTANT:
    case FLOAT:
      ExpressionStatement();
      break;
    case RETURN:
      ReturnStatement();
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// Variable Declaration
  static final public void VariableDeclaration() throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
        System.out.println("Declared variable: " + t.image);
    jj_consume_token(ASSIGN);
    Expression();
  }

// Function Declaration
  static final public void FunctionDeclaration() throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
        System.out.println("Declared function: " + t.image);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      ParameterList();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case FOR:
      case RETURN:
      case PLUS:
      case MINUS:
      case LPAREN:
      case IDENTIFIER:
      case CONSTANT:
      case FLOAT:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      Statement();
    }
    jj_consume_token(RBRACE);
  }

// Parameter List
  static final public void ParameterList() throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
        System.out.println("Parameter: " + t.image);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      t = jj_consume_token(IDENTIFIER);
        System.out.println("Parameter: " + t.image);
    }
  }

// If Statement
  static final public void IfStatement() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    Block();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      Block();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
  }

// While Statement
  static final public void WhileStatement() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    Block();
  }

// For Statement
  static final public void ForStatement() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(SEMICOLON);
    Expression();
    jj_consume_token(SEMICOLON);
    Expression();
    jj_consume_token(RPAREN);
    Block();
  }

// Return Statement
  static final public void ReturnStatement() throws ParseException {
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
    case LPAREN:
    case IDENTIFIER:
    case CONSTANT:
    case FLOAT:
      Expression();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
  }

// Block of Statements
  static final public void Block() throws ParseException {
    jj_consume_token(LBRACE);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case FOR:
      case RETURN:
      case PLUS:
      case MINUS:
      case LPAREN:
      case IDENTIFIER:
      case CONSTANT:
      case FLOAT:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
      Statement();
    }
    jj_consume_token(RBRACE);
  }

// Expression Statement
  static final public void ExpressionStatement() throws ParseException {
    Expression();
  }

// Expression
  static final public void Expression() throws ParseException {
    OrExpression();
  }

// OR Expression
  static final public void OrExpression() throws ParseException {
    AndExpression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_6;
      }
      jj_consume_token(OR);
      AndExpression();
    }
  }

// AND Expression
  static final public void AndExpression() throws ParseException {
    RelationalExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_7;
      }
      jj_consume_token(AND);
      RelationalExpression();
    }
  }

// Relational Expression
  static final public void RelationalExpression() throws ParseException {
    AdditiveExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case GT:
      case LT:
      case GTE:
      case LTE:
      case 45:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
        jj_consume_token(GT);
        break;
      case LT:
        jj_consume_token(LT);
        break;
      case EQ:
        jj_consume_token(EQ);
        break;
      case 45:
        jj_consume_token(45);
        break;
      case GTE:
        jj_consume_token(GTE);
        break;
      case LTE:
        jj_consume_token(LTE);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      AdditiveExpression();
    }
  }

// Additive Expression
  static final public void AdditiveExpression() throws ParseException {
    MultiplicativeExpression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
    }
  }

// Multiplicative Expression
  static final public void MultiplicativeExpression() throws ParseException {
    UnaryExpression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
      case DIV:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
        jj_consume_token(MULT);
        break;
      case DIV:
        jj_consume_token(DIV);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
    }
  }

// Unary Expression
  static final public void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    PrimaryExpression();
  }

// Primary Expression
  static final public void PrimaryExpression() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
        System.out.println("Identifier: " + t.image);
      break;
    case CONSTANT:
      t = jj_consume_token(CONSTANT);
        System.out.println("Constant: " + t.image);
      break;
    case FLOAT:
      t = jj_consume_token(FLOAT);
        System.out.println("Float: " + t.image);
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ZaraParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8180003a,0x0,0x8180003a,0x80020000,0x8180003a,0x0,0x8180003a,0x0,0x4,0x81800000,0x8180003a,0x40000000,0x8000000,0x7c0000,0x7c0000,0x1800000,0x1800000,0x6000000,0x6000000,0x1800000,0x1800000,0x80000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x700,0x100,0x700,0x0,0x700,0x100,0x700,0x10,0x0,0x700,0x700,0x0,0x0,0x2000,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x700,};
   }

  /** Constructor with InputStream. */
  public ZaraParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ZaraParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ZaraParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ZaraParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ZaraParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ZaraParser(ZaraParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ZaraParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 22; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }



    /*public static void main(String args[]) throws ParseException, IOException {
        ZaraLexer lexer = new ZaraLexer(new FileReader(args[0]));
        ZaraParser parser = new ZaraParser(new LexerBridge(lexer));
        parser.Start();
    }*/
}
