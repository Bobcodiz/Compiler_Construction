
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package red.stevo.code.Lexer;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\002\004\000\002\002\004\000\002\003\004" +
    "\000\002\010\004\000\002\007\005\000\002\011\003\000" +
    "\002\011\002\000\002\012\003\000\002\012\002\000\002" +
    "\013\003\000\002\013\002\000\002\014\004\000\002\014" +
    "\003\000\002\015\004\000\002\015\004\000\002\015\004" +
    "\000\002\017\006\000\002\016\005\000\002\016\002\000" +
    "\002\004\005\000\002\004\005\000\002\004\003\000\002" +
    "\005\005\000\002\005\005\000\002\005\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\061\000\016\002\uffff\003\004\004\uffff\034\uffff\042" +
    "\uffff\043\uffff\001\002\000\006\027\062\035\063\001\002" +
    "\000\014\002\013\004\ufff8\034\ufff8\042\ufff8\043\007\001" +
    "\002\000\006\014\023\035\022\001\002\000\010\004\ufff9" +
    "\034\ufff9\042\ufff9\001\002\000\004\004\020\001\002\000" +
    "\014\002\000\004\000\034\000\042\000\043\000\001\002" +
    "\000\010\004\ufff6\034\ufff6\042\014\001\002\000\004\002" +
    "\001\001\002\000\006\004\ufff7\034\ufff7\001\002\000\006" +
    "\004\ufff4\034\016\001\002\000\004\004\ufff5\001\002\000" +
    "\004\004\ufffa\001\002\000\006\014\ufffb\035\ufffb\001\002" +
    "\000\014\002\ufffc\004\ufffc\034\ufffc\042\ufffc\043\ufffc\001" +
    "\002\000\014\002\ufff2\004\ufff2\034\ufff2\042\ufff2\043\ufff2" +
    "\001\002\000\014\004\034\005\025\006\035\007\027\036" +
    "\030\001\002\000\004\035\061\001\002\000\016\010\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\035\uffe5\037\uffe5\001\002\000" +
    "\010\010\054\011\052\035\060\001\002\000\004\035\057" +
    "\001\002\000\012\004\047\005\025\006\035\036\030\001" +
    "\002\000\016\010\uffe9\011\uffe9\012\044\013\045\035\uffe9" +
    "\037\uffe9\001\002\000\016\010\uffe6\011\uffe6\012\uffe6\013" +
    "\uffe6\035\uffe6\037\uffe6\001\002\000\014\002\ufff3\004\ufff3" +
    "\034\ufff3\042\ufff3\043\ufff3\001\002\000\016\010\uffe4\011" +
    "\uffe4\012\uffe4\013\uffe4\014\036\035\uffe4\001\002\000\016" +
    "\010\uffe3\011\uffe3\012\uffe3\013\uffe3\035\uffe3\037\uffe3\001" +
    "\002\000\004\004\037\001\002\000\006\014\041\035\uffec" +
    "\001\002\000\004\035\uffee\001\002\000\004\004\042\001" +
    "\002\000\006\014\041\035\uffec\001\002\000\004\035\uffed" +
    "\001\002\000\012\004\047\005\025\006\035\036\030\001" +
    "\002\000\012\004\047\005\025\006\035\036\030\001\002" +
    "\000\016\010\uffe7\011\uffe7\012\uffe7\013\uffe7\035\uffe7\037" +
    "\uffe7\001\002\000\016\010\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\035\uffe4\037\uffe4\001\002\000\016\010\uffe8\011\uffe8\012" +
    "\uffe8\013\uffe8\035\uffe8\037\uffe8\001\002\000\010\010\054" +
    "\011\052\037\053\001\002\000\012\004\047\005\025\006" +
    "\035\036\030\001\002\000\016\010\uffe2\011\uffe2\012\uffe2" +
    "\013\uffe2\035\uffe2\037\uffe2\001\002\000\012\004\047\005" +
    "\025\006\035\036\030\001\002\000\016\010\uffeb\011\uffeb" +
    "\012\044\013\045\035\uffeb\037\uffeb\001\002\000\016\010" +
    "\uffea\011\uffea\012\044\013\045\035\uffea\037\uffea\001\002" +
    "\000\014\002\ufff0\004\ufff0\034\ufff0\042\ufff0\043\ufff0\001" +
    "\002\000\014\002\uffef\004\uffef\034\uffef\042\uffef\043\uffef" +
    "\001\002\000\014\002\ufff1\004\ufff1\034\ufff1\042\ufff1\043" +
    "\ufff1\001\002\000\014\002\ufffd\004\ufffd\034\ufffd\042\ufffd" +
    "\043\ufffd\001\002\000\014\002\ufffe\004\ufffe\034\ufffe\042" +
    "\ufffe\043\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\061\000\004\002\004\001\001\000\002\001\001\000" +
    "\012\003\010\007\007\010\005\011\011\001\001\000\004" +
    "\014\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\025\005\030\006\031\015" +
    "\032\017\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\050\005" +
    "\030\006\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\042\001\001\000\002\001" +
    "\001\000\004\006\047\001\001\000\004\006\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\055\006\031\001\001\000\002" +
    "\001\001\000\006\005\054\006\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  private ZaraLexer scanner;

  public parser(ZaraLexer s) {
    this.scanner = s;
  }

  public java_cup.runtime.Symbol scan() throws java.lang.Exception {
     return scanner.yylex();
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= StmtList EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // StmtList ::= StmtList Stmt 
            {
              Object RESULT =null;
		System.out.println("Parsed StmtList: StmtList Stmt");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtList",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // StmtList ::= 
            {
              Object RESULT =null;
		 System.out.println("Parsed empty StmtList"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtList",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // StmtList ::= error SEMI_COLON 
            {
              Object RESULT =null;
		 System.err.println("Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtList",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // StmtList ::= error PUNCTUATION_CURLED_RIGHT 
            {
              Object RESULT =null;
		 System.err.println("Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtList",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Stmt ::= l_desclaration initialize 
            {
              Object RESULT =null;
		 System.out.println("Parsed Stmt ::= r_desclaration initialize"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // l_desclaration ::= keywords IDENTIFIER 
            {
              Object RESULT =null;
		 System.out.println("Parsed l_desclaration ::= keywords IDENTIFIER"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_desclaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // keywords ::= key_1 key_2 key_3 
            {
              Object RESULT =null;
		 System.out.println("Parsed keywords ::= key_1 key_2 key_3"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("keywords",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // key_1 ::= GLOBAL 
            {
              Object RESULT =null;
		 System.out.println("Parsed key_1 ::= GLOBAL | "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("key_1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // key_1 ::= 
            {
              Object RESULT =null;
		 System.out.println("Parsed key_1 ::= epsilon "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("key_1",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // key_2 ::= CONST 
            {
              Object RESULT =null;
		 System.out.println("Parsed key_2 ::= CONST |"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("key_2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // key_2 ::= 
            {
              Object RESULT =null;
		 System.out.println("Parsed key_2 ::= epsilon "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("key_2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // key_3 ::= DATATYPE 
            {
              Object RESULT =null;
		 System.out.println("Parsed key_3 ::= DATATYPE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("key_3",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // key_3 ::= 
            {
              Object RESULT =null;
		 System.out.println("Parsed key_3 ::= epsilon "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("key_3",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // initialize ::= ASSIGN valueAssign 
            {
              Object RESULT =null;
		System.out.println("Parsed initialize ::= ASSIGN valueAssign");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initialize",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // initialize ::= SEMI_COLON 
            {
              Object RESULT =null;
		System.out.println("Parsed initialize ::= SEMI_COLON");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initialize",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // valueAssign ::= firstmultipleAssign SEMI_COLON 
            {
              Object RESULT =null;
		System.out.println("Parsed valueAssign ::= multipleAssign SEMI_COLON");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valueAssign",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // valueAssign ::= STRING_LITERAL SEMI_COLON 
            {
              Object RESULT =null;
		System.out.println("Parsed valueAssign ::=  STRING_LITERAL SEMI_COLON");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valueAssign",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // valueAssign ::= Expr SEMI_COLON 
            {
              Object RESULT =null;
		System.out.println("Parsed valueAssign ::= Expr SEMI_COLON");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valueAssign",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // firstmultipleAssign ::= IDENTIFIER ASSIGN IDENTIFIER multipleAssign 
            {
              Object RESULT =null;
		System.out.println("Parsed firstmultipleAssign ::= IDENTIFIER  ASSIGN IDENTIFIER multipleAssign");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("firstmultipleAssign",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // multipleAssign ::= ASSIGN IDENTIFIER multipleAssign 
            {
              Object RESULT =null;
		System.out.println("Parsed multipleAssign ::= ASSIGN IDENTIFIER multipleAssign");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multipleAssign",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // multipleAssign ::= 
            {
              Object RESULT =null;
		System.out.println("Parsed multipleAssign ::= epsilon ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multipleAssign",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expr ::= Expr OPERATOR_ADD Term 
            {
              Object RESULT =null;
		System.out.println("Parsed Expr: Expr OPERATOR_ADD Term");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expr ::= Expr OPERATOR_SUB Term 
            {
              Object RESULT =null;
		System.out.println("Parsed Expr: Expr OPERATOR_SUB Term");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expr ::= Term 
            {
              Object RESULT =null;
		System.out.println("Parsed Expr: Term");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Term ::= Term OPERATOR_MUL Factor 
            {
              Object RESULT =null;
		System.out.println("Parsed Term: Term OPERATOR_MUL Factor");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Term ::= Term OPERATOR_DIV Factor 
            {
              Object RESULT =null;
		System.out.println("Parsed Term: Term OPERATOR_DIV Factor");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Term ::= Factor 
            {
              Object RESULT =null;
		System.out.println("Parsed Term: Factor");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Factor ::= CONSTANT 
            {
              Object RESULT =null;
		System.out.println("Parsed Factor: CONSTANT");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Factor ::= IDENTIFIER 
            {
              Object RESULT =null;
		System.out.println("Parsed Factor: IDENTIFIER");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Factor ::= FLOAT 
            {
              Object RESULT =null;
		System.out.println("Parsed Factor: FLOAT");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Factor ::= PUNCTUATION_LEFT Expr PUNCTUATION_RIGHT 
            {
              Object RESULT =null;
		System.out.println("Parsed Factor: PUNCTUATION_LEFT Expr PUNCTUATION_RIGHT");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
