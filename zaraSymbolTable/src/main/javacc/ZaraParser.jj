options {
    STATIC = false;
    UNICODE_INPUT = true;
    LOOKAHEAD = 1;  // Standard LL(1) parsing
}

PARSER_BEGIN(ZaraParser)
import java.io.*;
import java_cup.runtime.Symbol;

// The parser uses the JFlex lexer ZaraLexer
public class ZaraParser {
    ZaraLexer lexer;

    public ZaraParser(InputStreamReader in) {
        lexer = new ZaraLexer(in);  // Instantiate the lexer with an InputStream
    }

    public void Start() throws Exception {
        Symbol s = lexer.next_token();  // Get token from the JFlex lexer
        while (s.sym != sym.EOF) {
            // Process token, build AST, etc.
            System.out.println("Token: " + s.sym + " (" + s.value + ")");
            s = lexer.next_token();  // Get next token
        }
    }
}
PARSER_END(ZaraParser)

TOKEN : {
    <IDENTIFIER : "IDENTIFIER">|
    <CONSTANT : "CONSTANT">|
    <FLOAT :"FLOAT">
}
// Grammar rules start here

void Start() :
{
    // Root of the program
}
{
    (Statement())* <EOF>
}

void Statement() :
{
    // Handle different types of statements
}
{
    ( VariableDeclaration() | FunctionDeclaration() | IfStatement() | WhileStatement() | ForStatement() | ExpressionStatement() | ReturnStatement() ) ";"
}

void VariableDeclaration() :
{
    Token t;
}
{

    t = <IDENTIFIER> "=" Expression() { System.out.println("Declared variable: " + t.image); }
}

void FunctionDeclaration() :
{
    Token t;
}
{
    <IDENTIFIER> "(" ( ParameterList() )? ")" "{" (Statement())* "}"
    { System.out.println("Declared function: " + t.image); }
}

void ParameterList() :
{
    // List of parameters in function definition
}
{
    <IDENTIFIER> ("," <IDENTIFIER>)*
}

void IfStatement() :
{
}
{
    "if" "(" Expression() ")" Block() ( "else" Block() )?
}

void WhileStatement() :
{
}
{
    "while" "(" Expression() ")" Block()
}

void ForStatement() :
{
}
{
    "for" "(" Expression() ";" Expression() ";" Expression() ")" Block()
}

void ReturnStatement() :
{
}
{
    "return" (Expression())?
}

void Block() :
{
}
{
    "{" (Statement())* "}"
}

void ExpressionStatement() :
{
}
{
    Expression()
}

void Expression() :
{
    // Handle arithmetic, logical, and relational expressions
}
{
    OrExpression()
}

void OrExpression() :
{
}
{
    AndExpression() ( "||" AndExpression() )*
}

void AndExpression() :
{
}
{
    RelationalExpression() ( "&&" RelationalExpression() )*
}

void RelationalExpression() :
{
}
{
    AdditiveExpression() ( ( ">" | "<" | "==" | "!=" | ">=" | "<=" ) AdditiveExpression() )*
}

void AdditiveExpression() :
{
}
{
    MultiplicativeExpression() ( ( "+" | "-" ) MultiplicativeExpression() )*
}

void MultiplicativeExpression() :
{
}
{
    UnaryExpression() ( ( "*" | "/" ) UnaryExpression() )*
}

void UnaryExpression() :
{
}
{
    ( "+" | "-" )? PrimaryExpression()
}

void PrimaryExpression() :
{
    Token t;
}
{
    ( <IDENTIFIER> { System.out.println("Identifier: " + t.image); }
    | <CONSTANT> { System.out.println("Constant: " + t.image); }
    | <FLOAT> { System.out.println("Float: " + t.image); }
    | "(" Expression() ")" )
}

/* Helper tokens */
SPECIAL_TOKEN : {
    < #DIGIT : ["0"-"9"] >
    | < #LETTER : ["A"-"Z", "a"-"z"] >
}
